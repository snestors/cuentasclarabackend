# CuentasClaras Backend - Manual Completo v2.0

## Estado Actual: ✅ COMPLETAMENTE FUNCIONAL CON GASTOS RECURRENTES

Versión actual implementada con autenticación, cuentas, categorías, transacciones, **PRÉSTAMOS** y **GASTOS RECURRENTES + RECORDATORIOS** funcionando perfectamente.

---

## 🎯 **CARACTERÍSTICAS COMPLETADAS**

### ✅ **Autenticación Completa**

- JWT Access Token (10 minutos)
- Refresh Token Rotation (30 días)
- Login único por usuario
- WebSocket para force_logout
- Device session tracking con refresh_token_id
- Invalidación automática de tokens anteriores

### ✅ **Modelos Implementados**

- **User**: Usuarios con datos encriptados
- **DeviceSession**: Control de sesiones únicas
- **Account**: Cuentas financieras del usuario
- **Category**: Categorías para clasificar gastos
- **Transaction**: Registro central de movimientos (con constraints BD)
- **Loan**: Sistema completo de préstamos dados/recibidos
- **LoanPayment**: Pagos de préstamos con confirmación manual
- **RecurringExpense**: Gastos recurrentes (alquiler, servicios) ✨ NUEVO
- **Reminder**: Sistema de recordatorios automáticos ✨ NUEVO

### ✅ **Seguridad Robusta**

- Encriptación AES-256 de campos sensibles
- Middleware de autenticación robusto
- Constraints de BD para consistencia de datos
- Refresh token ligado a access token
- Desencriptación correcta en responses
- Validación de tokens en tiempo real

### ✅ **Sistema de Jobs y Recordatorios** ✨ NUEVO

- Job diario automático para recordatorios
- Notificaciones 2 días antes del vencimiento
- Alertas de gastos vencidos (overdue)
- Sistema de prioridades (normal, high)
- Logs detallados de notificaciones

### ✅ **API Endpoints Funcionales**

```
Auth:
POST   /api/v1/auth/register
POST   /api/v1/auth/login
POST   /api/v1/auth/refresh
GET    /api/v1/auth/profile
PUT    /api/v1/auth/profile
POST   /api/v1/auth/logout

Accounts:
POST   /api/v1/accounts
GET    /api/v1/accounts
GET    /api/v1/accounts/:id
PUT    /api/v1/accounts/:id
DELETE /api/v1/accounts/:id

Categories:
POST   /api/v1/categories
GET    /api/v1/categories
GET    /api/v1/categories/:id
PUT    /api/v1/categories/:id
DELETE /api/v1/categories/:id

Transactions:
POST   /api/v1/transactions
GET    /api/v1/transactions (con filtros)
GET    /api/v1/transactions/:id
PUT    /api/v1/transactions/:id
DELETE /api/v1/transactions/:id

Loans:
POST   /api/v1/loans                     # Crear préstamo + transaction automática
GET    /api/v1/loans                     # Listar préstamos con balances
GET    /api/v1/loans/:id                 # Ver préstamo específico
PUT    /api/v1/loans/:id                 # Actualizar préstamo
DELETE /api/v1/loans/:id                 # Eliminar préstamo
POST   /api/v1/loans/:id/payments        # Crear payment (pendiente)
PUT    /api/v1/loan-payments/:id/confirm # Confirmar payment (crea transaction)

Recurring Expenses: ✨ NUEVO - COMPLETAMENTE FUNCIONAL
POST   /api/v1/recurring-expenses        # Crear gasto recurrente + recordatorios
GET    /api/v1/recurring-expenses        # Listar gastos recurrentes (con filtros)
GET    /api/v1/recurring-expenses/:id    # Ver gasto recurrente específico
PUT    /api/v1/recurring-expenses/:id    # Actualizar gasto recurrente
DELETE /api/v1/recurring-expenses/:id    # Eliminar gasto recurrente
POST   /api/v1/recurring-expenses/:id/execute # Ejecutar gasto (crear transaction)
```

---

## 🔧 **CONFIGURACIÓN ACTUAL**

### **Tecnologías**

- **Backend**: Go + Fiber v2 + GORM
- **BD Desarrollo**: SQLite
- **BD Producción**: PostgreSQL (configurado)
- **Encriptación**: AES-256-GCM
- **Job Scheduler**: Interno con Goroutines

### **Variables de Entorno (.env)**

```bash
# Database
DB_DRIVER=sqlite
DB_NAME_SQLITE=cuentas_claras.db

# Prod - PostgreSQL
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=password
DB_NAME=cuentas_claras_db

# Server
PORT=3000

# JWT
JWT_SECRET=tu-jwt-secret-super-seguro-aqui

# Encryption
ENCRYPTION_KEY=mi-clave-super-secreta-32-chars!!
```

### **Estructura del Proyecto**

```
cuentas-claras-backend/
├── main.go
├── .env
├── config/
│   ├── database.go
│   ├── migrate.go
│   └── constraints.go
├── models/
│   ├── user.go
│   ├── device_session.go
│   ├── account.go
│   ├── category.go
│   ├── transaction.go
│   ├── loan.go
│   ├── loan_payment.go
│   ├── recurring_expense.go    ✨ NUEVO
│   └── reminder.go             ✨ NUEVO
├── handlers/
│   ├── auth.go
│   ├── user.go
│   ├── account.go
│   ├── category.go
│   ├── transaction.go
│   ├── loan.go
│   ├── recurring_expense.go    ✨ NUEVO
│   └── websocket.go            🔄 TODO
├── services/
│   └── reminder_service.go     ✨ NUEVO
├── middleware/
│   └── auth.go
├── utils/
│   ├── crypto.go
│   └── tokens.go
└── routes/
    └── routes.go
```

---

## 🔄 **FLUJOS DE NEGOCIO IMPLEMENTADOS**

### **🏠 Flujo de Gastos Recurrentes**

#### **1. Crear Gasto Recurrente**

```json
POST /api/v1/recurring-expenses
{
  "account_id": 1,
  "category_id": 1,
  "amount": 1200,
  "description": "Alquiler del departamento",
  "frequency": "monthly",
  "start_date": "2025-01-15T00:00:00Z",
  "notes": "Pago el 15 de cada mes"
}
```

**¿Qué sucede automáticamente?**

- ✅ Se crea el RecurringExpense
- ✅ Se generan 3 recordatorios automáticamente:
  - 2 días antes: "Próximo: Alquiler del departamento"
  - 1 día antes: "Mañana vence: Alquiler del departamento"
  - El día mismo: "¡Vence hoy! Alquiler del departamento"

#### **2. Sistema de Recordatorios (Job Diario)**

- **Corre automáticamente** cada 24 horas
- **Busca recordatorios** pendientes de envío
- **Envía notificaciones** (por ahora logs, preparado para FCM)
- **Marca como enviados** los recordatorios procesados
- **Detecta gastos vencidos** y crea alertas adicionales

#### **3. Ejecutar Gasto Recurrente**

```json
POST /api/v1/recurring-expenses/1/execute
{
  "amount": 1150,
  "date": "2025-01-15T10:30:00Z",
  "notes": "Pagado con descuento de S/ 50"
}
```

**¿Qué sucede automáticamente?**

- ✅ Se crea Transaction: -1150 (gasto)
- ✅ Se actualiza next_due_date: 2025-02-15
- ✅ Se generan nuevos recordatorios para el próximo mes

### **💰 Flujo de Préstamos**

#### **1. Crear Préstamo**

- Genera Transaction automática (dinero entra/sale)
- Encripta datos sensibles (person_name, notes)
- Calcula balances dinámicamente

#### **2. Registrar Pago**

- Crea LoanPayment (pendiente de confirmación)
- NO genera Transaction aún

#### **3. Confirmar Pago**

- Crea Transaction del pago
- Actualiza status del préstamo automáticamente
- Vincula LoanPayment con Transaction

---

## 📝 **MODELOS DE DATOS DETALLADOS**

### **RecurringExpense** ✨ NUEVO

```go
type RecurringExpense struct {
    ID          uint       `json:"id" gorm:"primaryKey"`
    UserID      uint       `json:"user_id" gorm:"not null"`
    AccountID   uint       `json:"account_id" gorm:"not null"`
    CategoryID  uint       `json:"category_id" gorm:"not null"`

    // Configuración del gasto
    Amount      float64    `json:"amount" gorm:"not null"`
    Description string     `json:"description" gorm:"not null"`

    // Configuración de recurrencia
    Frequency   string     `json:"frequency" gorm:"not null"` // daily, weekly, monthly, yearly
    StartDate   time.Time  `json:"start_date" gorm:"not null"`
    EndDate     *time.Time `json:"end_date,omitempty"`
    NextDueDate time.Time  `json:"next_due_date" gorm:"not null"`

    // Control
    IsActive     bool   `json:"is_active" gorm:"default:true"`
    AutoGenerate bool   `json:"auto_generate" gorm:"default:false"`
    Notes        string `json:"notes" gorm:"size:500"`

    // Métodos útiles
    CalculateNextDueDate() time.Time
    IsOverdue() bool
    IsDueToday() bool
}
```

### **Reminder** ✨ NUEVO

```go
type Reminder struct {
    ID          uint      `json:"id" gorm:"primaryKey"`
    UserID      uint      `json:"user_id" gorm:"not null"`
    Title       string    `json:"title" gorm:"not null"`
    Description string    `json:"description" gorm:"size:255"`
    Type        string    `json:"type" gorm:"not null"` // "recurring_expense", "loan", "custom"

    // Referencia al objeto relacionado
    ReferenceID   *uint  `json:"reference_id,omitempty"`
    ReferenceType string `json:"reference_type,omitempty"`

    // Configuración de recordatorio
    RemindAt time.Time `json:"remind_at" gorm:"not null"`
    IsActive bool      `json:"is_active" gorm:"default:true"`
    IsSent   bool      `json:"is_sent" gorm:"default:false"`
    Priority string    `json:"priority" gorm:"default:'normal'"`

    // Métodos útiles
    ShouldBeSent() bool
    MarkAsSent(db *gorm.DB) error
}
```

---

## 🔐 **SEGURIDAD IMPLEMENTADA**

### **Encriptación Automática**

Los siguientes campos se encriptan automáticamente:

- `User.name_encrypted`
- `User.phone_encrypted`
- `Transaction.notes_encrypted`
- `Loan.description_encrypted`
- `Loan.person_name_encrypted`
- `Loan.notes_encrypted`
- `LoanPayment.description_encrypted`
- `LoanPayment.notes_encrypted`

### **Constraints de BD Implementados**

```sql
-- Transactions
-- Direction solo 'in' o 'out'
-- Amount positivo para 'in', negativo para 'out'
-- Type consistente con direction
-- Amount no puede ser cero

-- RecurringExpenses ✨ NUEVO
-- Frequency solo 'daily', 'weekly', 'monthly', 'yearly'
-- Amount debe ser positivo
```

### **Balance Dinámico**

Los balances se calculan en tiempo real desde transacciones:

```sql
SELECT SUM(amount) as balance
FROM transactions
WHERE account_id = ? AND user_id = ? AND deleted_at IS NULL
```

---

## 🧪 **TESTING COMPLETO**

### **Setup inicial:**

```bash
# Registro
curl -X POST http://localhost:3000/api/v1/auth/register \
  -H "Content-Type: application/json" \
  -d '{"name":"Test User","email":"test@test.com","password":"123456"}'

# Login
curl -X POST http://localhost:3000/api/v1/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test@test.com","password":"123456","device_info":{"device_id":"test"}}'

export TOKEN="tu_access_token_aqui"
```

### **Crear datos básicos:**

```bash
# Cuenta
curl -X POST http://localhost:3000/api/v1/accounts \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"name":"Cuenta Principal","type":"bank","currency":"PEN"}'

# Categoría
curl -X POST http://localhost:3000/api/v1/categories \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"name":"Gastos del Hogar","color":"#4CAF50"}'
```

### **Sistema de Gastos Recurrentes:** ✨ NUEVO

```bash
# Crear gasto recurrente (Alquiler)
curl -X POST http://localhost:3000/api/v1/recurring-expenses \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "account_id": 1,
    "category_id": 1,
    "amount": 1200,
    "description": "Alquiler del departamento",
    "frequency": "monthly",
    "start_date": "2025-01-15T00:00:00Z",
    "notes": "Pago el 15 de cada mes"
  }'

# Listar gastos recurrentes
curl -X GET http://localhost:3000/api/v1/recurring-expenses \
  -H "Authorization: Bearer $TOKEN"

# Listar solo mensuales
curl -X GET "http://localhost:3000/api/v1/recurring-expenses?frequency=monthly" \
  -H "Authorization: Bearer $TOKEN"

# Ejecutar gasto recurrente (simular pago)
curl -X POST http://localhost:3000/api/v1/recurring-expenses/1/execute \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "amount": 1150,
    "date": "2025-01-15T10:30:00Z",
    "notes": "Pagado con descuento de S/ 50"
  }'
```

### **Sistema de Préstamos:**

```bash
# Crear préstamo DADO
curl -X POST http://localhost:3000/api/v1/loans \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "account_id": 1,
    "amount": 5000,
    "description": "Préstamo de emergencia para Juan",
    "person_name": "Juan Pérez García",
    "type": "given",
    "loan_date": "2025-01-15T00:00:00Z",
    "notes": "Préstamo sin interés, pago en 3 meses"
  }'

# Crear pago
curl -X POST http://localhost:3000/api/v1/loans/1/payments \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "account_id": 1,
    "amount": 1500,
    "date": "2025-02-15T00:00:00Z",
    "description": "Primer pago parcial del préstamo",
    "notes": "Pago recibido en efectivo"
  }'

# Confirmar pago (crea transaction)
curl -X PUT http://localhost:3000/api/v1/loan-payments/1/confirm \
  -H "Authorization: Bearer $TOKEN"
```

---

## 🚀 **CÓMO EJECUTAR**

### **Desarrollo**

```bash
# Instalar dependencias
go mod tidy

# Configurar .env (usar SQLite)
DB_DRIVER=sqlite
DB_NAME_SQLITE=cuentas_claras.db

# Ejecutar
go run main.go
```

**Lo que verás en los logs:**

```
Using SQLite database: cuentas_claras.db
Database connected successfully
Transaction constraints created successfully
RecurringExpense constraints created successfully
Database migrations completed successfully
Daily reminder job started ✨ NUEVO
CuentasClaras API - Running with Reminders! 🔔
```

### **Producción**

```bash
# Configurar .env (usar PostgreSQL)
DB_DRIVER=postgres
DB_HOST=tu-host-postgres
DB_NAME=cuentas_claras_db

# Ejecutar
go build
./cuentas-claras
```

---

## 📋 **TODO: PRÓXIMAS IMPLEMENTACIONES**

### 🎯 **PRIORIDAD ALTA**

#### **✅ TODO-1: Sistema de Préstamos - COMPLETADO**

#### **✅ TODO-2: Gastos Recurrentes - COMPLETADO**

#### **✅ TODO-3: Sistema de Recordatorios - COMPLETADO**

#### **TODO-4: WebSocket para Autenticación Real-time** ⚡ PRÓXIMO

**Objetivo**: Implementar force_logout en tiempo real cuando hay login desde otro dispositivo.

```go
// handlers/websocket.go - TODO IMPLEMENTATION

// Características a implementar:
// 1. WSAuthMiddleware: Validar JWT antes de WebSocket upgrade
// 2. WSManager: Gestionar conexiones activas por usuario
// 3. SendForceLogout: Enviar force_logout en tiempo real
// 4. Notificaciones real-time para recordatorios
// 5. Heartbeat/ping mechanism

// Dependencias necesarias:
// github.com/gofiber/websocket/v2

// Uso:
// wss://api.app.com/ws?token=jwt_access_token

// Mensajes:
// {"type": "force_logout", "message": "Nueva sesión iniciada"}
// {"type": "notification", "data": {...}}
// {"type": "ping", "timestamp": "..."}
```

**Integración requerida:**

- `routes/routes.go`: Agregar ruta WebSocket
- `handlers/auth.go`: Enviar force_logout en Login
- `services/reminder_service.go`: Usar WebSocket para notificaciones

#### **TODO-5: Notificaciones Push (FCM)**

#### **TODO-5: Notificaciones Push (FCM)**

```go
// Implementar en reminder_service.go
func (rs *ReminderService) SendPushNotification(userID uint, title, body string) {
    // Integración con Firebase Cloud Messaging
    // Obtener FCM token del usuario
    // Enviar notificación push real
}
```

### 🎯 **PRIORIDAD MEDIA**

#### **TODO-6: Endpoints Adicionales**

#### **TODO-6: Endpoints Adicionales**

```
GET /api/v1/accounts/:id/balance           # Balance específico con filtros
GET /api/v1/accounts/:id/history           # Historial detallado
GET /api/v1/recurring-expenses/due-soon    # Gastos que vencen pronto
GET /api/v1/reminders                      # Listar recordatorios del usuario
```

#### **TODO-7: Sistema de Reportes**

```
GET /api/v1/reports/summary                # Resumen general
GET /api/v1/reports/monthly/:year/:month   # Reporte mensual
GET /api/v1/reports/categories             # Gastos por categoría
GET /api/v1/reports/recurring              # Estadísticas de gastos recurrentes
```

#### **TODO-8: Validaciones Adicionales**

- Validar monedas ISO (PEN, USD, EUR)
- Límites de transacciones por día/mes
- Validación de fechas de gastos recurrentes

### 🎯 **PRIORIDAD BAJA**

#### **TODO-9: Optimizaciones**

#### **TODO-9: Optimizaciones**

- Índices de BD para queries frecuentes
- Paginación en listados
- Cache de balances frecuentes

#### **TODO-10: Testing**

- Unit tests para handlers
- Integration tests para endpoints
- Tests de job scheduler
- Tests de WebSocket connections

---

## 🎉 **LOGROS ALCANZADOS**

### **✅ Sistema Financiero Completo:**

- ✅ Control total de ingresos y gastos
- ✅ Múltiples cuentas con diferentes monedas
- ✅ Sistema completo de préstamos dados/recibidos
- ✅ Gastos recurrentes con recordatorios automáticos ✨
- ✅ Job scheduler para notificaciones ✨
- ✅ Cálculos automáticos de balances y estados
- ✅ Encriptación de datos sensibles

### **✅ Seguridad de Nivel Empresarial:**

- ✅ Autenticación JWT con refresh rotation
- ✅ Login único con control de dispositivos
- ✅ Encriptación AES-256 de campos sensibles
- ✅ Constraints de BD para consistencia
- ✅ Middleware de autenticación robusto

### **✅ Arquitectura Escalable:**

- ✅ Modelos bien estructurados
- ✅ API RESTful consistente
- ✅ Separación clara de responsabilidades
- ✅ Job scheduler interno eficiente ✨
- ✅ Servicios modulares (ReminderService) ✨
- ✅ Configuración flexible (SQLite/PostgreSQL)

---

## 🔄 **PRÓXIMO PASO RECOMENDADO**

**¡El backend está completo para MVP!** 🚀

**Opciones:**

1. **Frontend Flutter**: Empezar la aplicación móvil
2. **Notificaciones Push**: Implementar FCM para notificaciones reales
3. **Reportes**: Agregar endpoints de estadísticas y resúmenes
4. **Testing**: Agregar tests unitarios e integración

**Recomendación**: **Empezar con Flutter** - tenemos un backend robusto y completo para comenzar el desarrollo móvil.

---

## 📊 **ARQUITECTURA ACTUAL**

```
┌─────────────────┐    HTTP/REST API    ┌─────────────────┐
│   Flutter App   │◄──────────────────►│   Go Backend    │
│   (Mobile)      │                     │   (Fiber)       │
└─────────────────┘                     └─────────────────┘
        │                                         │
        │ WebSocket (preparado)                   │ GORM + Job Scheduler ✨
        │                                         ▼
        └─────────────────────────────────►┌─────────────────┐
                                           │   SQLite/       │
                                           │   PostgreSQL    │
                                           └─────────────────┘
```

**Características técnicas:**

- ✅ Login único con device sessions
- ✅ Refresh token rotation automática
- ✅ Encriptación AES-256 de datos sensibles
- ✅ Balance dinámico calculado en tiempo real
- ✅ Constraints de BD para consistencia
- ✅ Soft delete en todos los modelos
- ✅ Job scheduler para recordatorios automáticos ✨
- ✅ Sistema de notificaciones preparado para FCM ✨
- 🔄 WebSocket preparado para force_logout real-time (TODO)

---

## 📞 **SOPORTE**

- **Estado actual**: Backend completamente funcional con gastos recurrentes
- **API Testing**: Usar Postman/curl con Bearer tokens
- **Base de datos**: SQLite para desarrollo, PostgreSQL para producción
- **Logs**: Job de recordatorios visible en consola
- **Comandos de prueba**: Incluidos en este manual

---

**CuentasClaras Backend v2.0** es ahora una aplicación financiera completa, segura y con recordatorios automáticos! 💰🔔🚀

### **¿Listo para Flutter?** 📱
